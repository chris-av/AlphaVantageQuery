# here is the api key for alpha vantage
# key: 1455F2N7QCHHDV1W

setwd("~/Dropbox/Documents/R")

# api_key = "1455F2N7QCHHDV1W"
# stock_symbol = "GOOGL"

companylist = read_csv("~/Dropbox/Documents/R/companylist.csv")



# this is the ultimate function
# arguments are the following
  # stock symbol: please find the stock's 'ticker' symbol on the web!
  # frequency: options are "daily" and "intraday". For "intraday", please fill the interval argument
  # interval: if "intraday", how should intervals be broken up. Options are "1min", "5min", "15min", "30min" and "60min" [default]
alpha_vant = function(stock_symbol, frequency, interval = NULL){
  require(jsonlite)
  require(jsonlite)
  
  if(frequency == "intraday"){
    api_key = "1455F2N7QCHHDV1W"
    if(is.null(interval)){
      interval = "60min"
    } else {}
    tryCatch(
      {
        data = fromJSON(
          paste0(
            "https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=", stock_symbol,"&interval=", interval, "&outputsize=full&apikey=", api_key
          )
        )
        if("Error Message" %in% names(data)){
          stop("API call unsuccessful. Ensure that you entered a valid ticker symbol, frequency or interval argument!")
        } else {
          filler = 1:length(data[[2]])
          transformed_data = data.frame(date = filler, time = filler, open = filler, high = filler, low = filler, close = filler, volume = filler, 
                                        stringsAsFactors = F)
          for(i in 1:length(data[[2]])){
            transformed_data$date[i] = strsplit(names(data[[2]]), " ")[[i]][1]
            transformed_data$time[i] = strsplit(names(data[[2]]), " ")[[i]][2]
            transformed_data$open[i] = data[[2]][[i]][1][[1]]
            transformed_data$high[i] = data[[2]][[i]][2][[1]]
            transformed_data$low[i] = data[[2]][[i]][3][[1]]
            transformed_data$close[i] = data[[2]][[i]][4][[1]]
            transformed_data$volume[i] = data[[2]][[i]][5][[1]]
          }
          
          transformed_data$date = as.Date(transformed_data$date)
          mod_cols = names(transformed_data)[!(names(transformed_data) %in% c("date", "time"))]
          transformed_data[,mod_cols] = sapply(transformed_data[,mod_cols], as.numeric)
          transformed_data = transformed_data[order(transformed_data$date, transformed_data$time),]
          rownames(transformed_data) = 1:nrow(transformed_data)
          
          assign(paste0(stock_symbol,"_", interval), transformed_data, envir = .GlobalEnv)
        }
      },
      warning = function(w) {
        message(w)
      },
      error = function(e) {
        message(e)
      } 
    )
    
  } else if(frequency == "daily"){
    api_key = "1455F2N7QCHHDV1W"
    tryCatch(
      {
        data = fromJSON(
          paste0(
            "https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=", stock_symbol,"&outputsize=full&apikey=", api_key
          )
        )
        if("Error Message" %in% names(data)){
          stop("API call unsuccessful. Ensure that you entered a valid ticker symbol, frequency or interval arguments!")
        } else {
          assign("time_series", data$`Time Series (Daily)`)
          merged_data = data.frame(date = names(time_series),
                                   open = NA,
                                   high = NA,
                                   low = NA,
                                   close = NA,
                                   volume = NA,
                                   stringsAsFactors = F)
          
          for(i in 1:nrow(merged_data)){
            merged_data$open[i] = time_series[[i]][1]
            merged_data$high[i] = time_series[[i]][2]
            merged_data$low[i] = time_series[[i]][3]
            merged_data$close[i] = time_series[[i]][4]
            merged_data$volume[i] = time_series[[i]][5]
          }
          merged_data[,2:ncol(merged_data)] = sapply(merged_data[,2:ncol(merged_data)], as.numeric)
          merged_data$date = as.Date(merged_data$date)
          merged_data = merged_data[order(merged_data$date),]
          assign(paste0(stock_symbol, "_daily"), merged_data, envir = .GlobalEnv)
        }
      },
      warning = function(w) {
        message(w)
      },
      error = function(e) {
        message(e)
      }
    )
  } else{
    tryCatch(stop("invalid 'frequency' argument!"), 
             warning = function(w){
               message(w)
             },
             error = function(e){
               message(e)
             }
    )
  }
}

# error checking
{
  alpha_vant("GOOGL", frequency = "daily")                                # a normal looking call for daily data
  alpha_vant("GOOGL", frequency = "intraday")                             # a normal looking call for intra day data
  alpha_vant("GOOGL", frequency = "intraday", interval = "15min")         # a normal looking call for intra day, 15 minutes specifically
  
  alpha_vant("GOOGL")                                                     # without the frequency argument
  alpha_vant("GOOGL", frequency = "dailyyy")                              # invalid frequency argument
  alpha_vant("GOOGL ", frequency = "daily")                               # invalid frequency argument (with white space to throw off JSON)
  alpha_vant("Boo!", frequency = "daily")                                 # invalid ticker
  alpha_vant("GOOGL", frequency = "intraday", interval = "15minutes")     # invalid interval argument
  alpha_vant("GOOGL", frequency = "intraday", interval = "15 minutes")    # invalid interval argument
  
}


# Other stuff
{
  alpha_vant_daily = function(stock_symbol){
    api_key = "1455F2N7QCHHDV1W"
    data = fromJSON(
      paste0(
        "https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=", stock_symbol,"&outputsize=full&apikey=", api_key
      )
    )
    assign("time_series", data$`Time Series (Daily)`)
    merged_data = data.frame(date = names(time_series),
                             open = NA,
                             high = NA,
                             low = NA,
                             close = NA,
                             volume = NA,
                             stringsAsFactors = F)
    
    for(i in 1:nrow(merged_data)){
      merged_data$open[i] = time_series[[i]][1]
      merged_data$high[i] = time_series[[i]][2]
      merged_data$low[i] = time_series[[i]][3]
      merged_data$close[i] = time_series[[i]][4]
      merged_data$volume[i] = time_series[[i]][5]
    }
    merged_data[,2:ncol(merged_data)] = sapply(merged_data[,2:ncol(merged_data)], as.numeric)
    merged_data$date = as.Date(merged_data$date)
    merged_data = merged_data[order(merged_data$date),]
    assign(paste0(stock_symbol, "_daily"), merged_data, envir = .GlobalEnv)
  }
  
  
  # intra day data (stock prices by minute and hour)
  alpha_vant_intra = function(stock_symbol, interval){
    api_key = "1455F2N7QCHHDV1W"
    data = fromJSON(
      paste0(
        "https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=", stock_symbol,"&interval=", interval, "&outputsize=full&apikey=", api_key
      )
    )
    filler = 1:length(data[[2]])
    transformed_data = data.frame(date = filler, open = filler, high = filler, low = filler, close = filler, volume = filler, 
                                  stringsAsFactors = F)
    for(i in 1:length(data[[2]])){
      transformed_data$date[i] = names(data[[2]])[i]
      transformed_data$open[i] = data[[2]][[i]][1][[1]]
      transformed_data$high[i] = data[[2]][[i]][2][[1]]
      transformed_data$low[i] = data[[2]][[i]][3][[1]]
      transformed_data$close[i] = data[[2]][[i]][4][[1]]
      transformed_data$volume[i] = data[[2]][[i]][5][[1]]
    }
    mod_cols = names(transformed_data)[!(names(transformed_data) %in% "date")]
    transformed_data[,mod_cols] = sapply(transformed_data[,mod_cols], as.numeric)
    transformed_data = transformed_data[order(transformed_data$date),]
    
    
    assign(paste0(stock_symbol,"_", interval), transformed_data, envir = .GlobalEnv)
  }
  
}






# cool shit
{
  alpha_vant("GOOGL", frequency = "daily")
  alpha_vant("GOOG", frequency = "daily")
  alpha_vant("TSLA", frequency = "daily")
  alpha_vant("MSFT", frequency = "daily")
  alpha_vant("NDAQ", frequency = "daily")
  
  
  
  
  matrix1 = matrix(
    c(
      rep(1,3),
      rep(1,3),
      rep(1,3),
      rep(2,3),
      rep(2,3)
    ), 
    nrow = 5, ncol = 3, byrow = TRUE
  )
  
  quartz()
  with(subset(GOOGL_daily, GOOGL_daily$date > as.Date("2010-01-01")),
       {
         layout(matrix1)
         plot(date, open, type = "l", main = "GOOGL")
         lines(date, high, col = "blue", lwd = 0.3)
         lines(date, low, col = "blue", lwd = 0.3)
         
         plot(date, volume, type = "l", main = "GOOGL", col = "#108a4c")
       }
  )
  
  quartz()
  with(subset(GOOG_daily, GOOG_daily$date > as.Date("2010-01-01")),
       {
         layout(matrix1)
         plot(date, open, type = "l", main = "GOOG")
         lines(date, high, col = "blue", lwd = 0.3)
         lines(date, low, col = "blue", lwd = 0.3)
         
         plot(date, volume, type = "l", main = "GOOG", col = "#108a4c")
       }
  )
  
  quartz()
  with(subset(MSFT_daily, MSFT_daily$date > as.Date("2015-01-01")),
       {
         layout(matrix1)
         plot(date, open, type = "l", main = "MSFT")
         lines(date, high, col = "blue", lwd = 0.3)
         lines(date, low, col = "blue", lwd = 0.3)
         
         plot(date, volume, type = "l", main = "MSFT", col = "#108a4c")
       }
  )
  
  
  quartz()
  with(subset(NDAQ_daily, NDAQ_daily$date > as.Date("2015-01-01")),
       {
         layout(matrix1)
         plot(date, open, type = "l", main = "NDAQ")
         lines(date, high, col = "blue", lwd = 0.3)
         lines(date, low, col = "blue", lwd = 0.3)
         
         plot(date, volume, type = "l", main = "NDAQ", col = "#108a4c")
       }
  )
  
  
}