library(devtools)
library(AlphaVantageQuery)
install.packages("testthat")
library(testthat)
library(AlphaVantageQuery)
use_readme_rmd()
knit_with_parameters('~/Dropbox/projects/R Projects/Packages/AlphaVantageQuery/README.Rmd')
library(AlphaVantageQuery)
#' @param interval
#'
#' @return returns a data frame given the parameters of the API query.
#' @export
#'
#' @examples
#' \dontrun{
#' alpha_vant("GOOGL", frequency = "daily")
#' }
#'
alpha_vant = function(stock_symbol, frequency, interval = NULL){
tryCatch(
{
frequency = gsub(" ", "", toupper(frequency))
data = jsonlite::fromJSON(
paste0(
"https://www.alphavantage.co/query?function=TIME_SERIES_", frequency, "&symbol=", stock_symbol,"&interval=", interval, "&outputsize=full&apikey=", api_key
)
)
if("Error Message" %in% names(data)){
stop("API call unsuccessful. Ensure that you entered a valid ticker symbol, frequency or interval argument!")
} else {
filler = 1:length(data[[2]])
transformed_data = data.frame(date = filler, time = filler, open = filler, high = filler, low = filler, close = filler, volume = filler,
stringsAsFactors = F)
for(i in 1:length(data[[2]])){
transformed_data$date[i] = strsplit(names(data[[2]]), " ")[[i]][1]
transformed_data$time[i] = strsplit(names(data[[2]]), " ")[[i]][2]
transformed_data$open[i] = data[[2]][[i]][1][[1]]
transformed_data$high[i] = data[[2]][[i]][2][[1]]
transformed_data$low[i] = data[[2]][[i]][3][[1]]
transformed_data$close[i] = data[[2]][[i]][4][[1]]
transformed_data$volume[i] = data[[2]][[i]][5][[1]]
}
transformed_data$date = as.Date(transformed_data$date)
mod_cols = names(transformed_data)[!(names(transformed_data) %in% c("date", "time"))]
transformed_data[,mod_cols] = sapply(transformed_data[,mod_cols], as.numeric)
transformed_data = transformed_data[order(transformed_data$date, transformed_data$time),]
rownames(transformed_data) = 1:nrow(transformed_data)
assign(paste0(stock_symbol,"_", interval), transformed_data, envir = .GlobalEnv)
}
},
warning = function(w) {
message(w)
},
error = function(e) {
message(e)
}
)
}
alpha_vant(stock_symbol = "GOOG", frequency = "daily")
alpha_vantage_auth("1455F2N7QCHHDV1W")
#' @param interval
#'
#' @return returns a data frame given the parameters of the API query.
#' @export
#'
#' @examples
#' \dontrun{
#' alpha_vant("GOOGL", frequency = "daily")
#' }
#'
alpha_vant = function(stock_symbol, frequency, interval = NULL){
api_key = Sys.getenv("auth_key")
# api_key = "1455F2N7QCHHDV1W"
tryCatch(
{
frequency = gsub(" ", "", toupper(frequency))
data = jsonlite::fromJSON(
paste0(
"https://www.alphavantage.co/query?function=TIME_SERIES_", frequency, "&symbol=", stock_symbol,"&interval=", interval, "&outputsize=full&apikey=", api_key
)
)
if("Error Message" %in% names(data)){
stop("API call unsuccessful. Ensure that you entered a valid ticker symbol, frequency or interval argument!")
} else {
filler = 1:length(data[[2]])
transformed_data = data.frame(date = filler, time = filler, open = filler, high = filler, low = filler, close = filler, volume = filler,
stringsAsFactors = F)
for(i in 1:length(data[[2]])){
transformed_data$date[i] = strsplit(names(data[[2]]), " ")[[i]][1]
transformed_data$time[i] = strsplit(names(data[[2]]), " ")[[i]][2]
transformed_data$open[i] = data[[2]][[i]][1][[1]]
transformed_data$high[i] = data[[2]][[i]][2][[1]]
transformed_data$low[i] = data[[2]][[i]][3][[1]]
transformed_data$close[i] = data[[2]][[i]][4][[1]]
transformed_data$volume[i] = data[[2]][[i]][5][[1]]
}
transformed_data$date = as.Date(transformed_data$date)
mod_cols = names(transformed_data)[!(names(transformed_data) %in% c("date", "time"))]
transformed_data[,mod_cols] = sapply(transformed_data[,mod_cols], as.numeric)
transformed_data = transformed_data[order(transformed_data$date, transformed_data$time),]
rownames(transformed_data) = 1:nrow(transformed_data)
assign(paste0(stock_symbol,"_", interval), transformed_data, envir = .GlobalEnv)
}
},
warning = function(w) {
message(w)
},
error = function(e) {
message(e)
}
)
}
alpha_vant(stock_symbol = "GOOG", frequency = "daily")
alpha_vant(stock_symbol = "GOOG", frequency = "monthly")
View(GOOG_)
#' @param interval
#'
#' @return returns a data frame given the parameters of the API query.
#' @export
#'
#' @examples
#' \dontrun{
#' alpha_vant("GOOGL", frequency = "daily")
#' }
#'
alpha_vant = function(stock_symbol, frequency, interval = NULL){
api_key = Sys.getenv("auth_key")
# api_key = "1455F2N7QCHHDV1W"
tryCatch(
{
frequency = gsub(" ", "", toupper(frequency))
data = jsonlite::fromJSON(
paste0(
"https://www.alphavantage.co/query?function=TIME_SERIES_", frequency, "&symbol=", stock_symbol,"&interval=", interval, "&outputsize=full&apikey=", api_key
)
)
if("Error Message" %in% names(data)){
stop("API call unsuccessful. Ensure that you entered a valid ticker symbol, frequency or interval argument!")
} else {
filler = 1:length(data[[2]])
transformed_data = data.frame(date = filler, time = filler, open = filler, high = filler, low = filler, close = filler, volume = filler,
stringsAsFactors = F)
for(i in 1:length(data[[2]])){
transformed_data$date[i] = strsplit(names(data[[2]]), " ")[[i]][1]
transformed_data$time[i] = strsplit(names(data[[2]]), " ")[[i]][2]
transformed_data$open[i] = data[[2]][[i]][1][[1]]
transformed_data$high[i] = data[[2]][[i]][2][[1]]
transformed_data$low[i] = data[[2]][[i]][3][[1]]
transformed_data$close[i] = data[[2]][[i]][4][[1]]
transformed_data$volume[i] = data[[2]][[i]][5][[1]]
}
transformed_data$date = as.Date(transformed_data$date)
mod_cols = names(transformed_data)[!(names(transformed_data) %in% c("date", "time"))]
transformed_data[,mod_cols] = sapply(transformed_data[,mod_cols], as.numeric)
transformed_data = transformed_data[order(transformed_data$date, transformed_data$time),]
rownames(transformed_data) = 1:nrow(transformed_data)
assign(paste0(stock_symbol,"_", frequency, interval), transformed_data, envir = .GlobalEnv)
}
},
warning = function(w) {
message(w)
},
error = function(e) {
message(e)
}
)
}
alpha_vant(stock_symbol = "GOOG", frequency = "monthly")
alpha_vant(stock_symbol = "GOOG", frequency = "intraday", interval = "30min")
View(GOOG_INTRADAY30min)
alpha_vant(stock_symbol = "GOOG", frequency = "monthly_adjusted")
View(GOOG_MONTHLY)
library(AlphaVantageQuery)
library(AlphaVantageQuery)
library(AlphaVantageQuery)
library(AlphaVantageQuery)
library(AlphaVantageQuery)
library(AlphaVantageQuery)
library(AlphaVantageQuery)
library(AlphaVantageQuery)
library(AlphaVantageQuery)
devtools::document()
library(AlphaVantageQuery)
library(AlphaVantageQuery)
library(AlphaVantageQuery)
library(AlphaVantageQuery)
library(AlphaVantageQuery)
library(AlphaVantageQuery)
library(AlphaVantageQuery)
library(AlphaVantageQuery)
library(AlphaVantageQuery)
library(AlphaVantageQuery)
library(AlphaVantageQuery)
library(AlphaVantageQuery)
alpha_vant("GOOGL", frequency = "daily") # a simple example
matrix1 = matrix(
c(
rep(1,3),
rep(1,3),
rep(1,3),
rep(2,3),
rep(2,3)
),
nrow = 5, ncol = 3, byrow = TRUE
)
with(subset(GOOGL_daily, GOOGL_daily$date > as.Date("2010-01-01")),
{
layout(matrix1)
plot(date, open, type = "l", main = "GOOGL")
lines(date, high, col = "blue", lwd = 0.3)
lines(date, low, col = "blue", lwd = 0.3)
plot(date, volume, type = "l", main = "GOOGL", col = "#108a4c")
}
)
alpha_vant("GOOGL", frequency = "daily") # a simple example
library(AlphaVantageQuery)
alpha_vant("GOOGL", frequency = "daily") # a simple example
matrix1 = matrix(
c(
rep(1,3),
rep(1,3),
rep(1,3),
rep(2,3),
rep(2,3)
),
nrow = 5, ncol = 3, byrow = TRUE
)
with(subset(GOOGL_DAILY, GOOGL_DAILY$date > as.Date("2010-01-01")),
{
layout(matrix1)
plot(date, open, type = "l", main = "GOOGL")
lines(date, high, col = "blue", lwd = 0.3)
lines(date, low, col = "blue", lwd = 0.3)
plot(date, volume, type = "l", main = "GOOGL", col = "#108a4c")
}
)
library(AlphaVantageQuery)
alpha_vant("GOOGL", frequency = "daily") # a simple example
matrix1 = matrix(
c(
rep(1,3),
rep(1,3),
rep(1,3),
rep(2,3),
rep(2,3)
),
nrow = 5, ncol = 3, byrow = TRUE
)
with(subset(GOOGL_DAILY, GOOGL_DAILY$date > as.Date("2010-01-01")),
{
layout(matrix1)
plot(date, open, type = "l", main = "GOOGL")
lines(date, high, col = "blue", lwd = 0.3)
lines(date, low, col = "blue", lwd = 0.3)
plot(date, volume, type = "l", main = "GOOGL", col = "#108a4c")
}
)
alpha_vant("GOOGL", frequency = "daily_adjusted")
with(GOOGL_DAILY, plot(date, open, type = "l", col = "blue")); with(GOOGL_DAILY_ADJUSTED, lines(date, open, col = "red"))
with(GOOGL_DAILY, plot(date, open, type = "l", col = "blue")); with(GOOGL_DAILY_ADJUSTED, lines(date, open, col = "red", lwd = 0.01))
with(GOOGL_DAILY, plot(date, open, type = "l", col = "blue")); with(GOOGL_DAILY_ADJUSTED, lines(date, open, col = "red", lwd = 0.1))
with(GOOGL_DAILY, plot(date, open, type = "l", col = "blue")); with(GOOGL_DAILY_ADJUSTED, lines(date, open, col = "red", lwd = 0.3))
library(AlphaVantageQuery)
alpha_vant("GOOGL", frequency = "daily")
alpha_vant("GOOGL", frequency = "monthly")
stock_symbol = "GOOGL"
frequency = "daily"
frequency = gsub(" ", "", toupper(frequency))
data = jsonlite::fromJSON(
paste0(
"https://www.alphavantage.co/query?function=TIME_SERIES_", frequency, "&symbol=", stock_symbol,"&interval=", interval, "&outputsize=full&apikey=", api_key
)
)
stock_symbol = "GOOGL"
frequency = "daily"
interval = NULL
frequency = gsub(" ", "", toupper(frequency))
data = jsonlite::fromJSON(
paste0(
"https://www.alphavantage.co/query?function=TIME_SERIES_", frequency, "&symbol=", stock_symbol,"&interval=", interval, "&outputsize=full&apikey=", api_key
)
)
interval = NULL
api_key = "1455F2N7QCHHDV1W"
stock_symbol = "GOOGL"
frequency = "daily"
interval = NULL
api_key = "1455F2N7QCHHDV1W"
frequency = gsub(" ", "", toupper(frequency))
data = jsonlite::fromJSON(
paste0(
"https://www.alphavantage.co/query?function=TIME_SERIES_", frequency, "&symbol=", stock_symbol,"&interval=", interval, "&outputsize=full&apikey=", api_key
)
)
alpha_vantage_auth("1455F2N7QCHHDV1W")
alpha_vant("GOOGL", frequency = "daily")
stock_symbol = "GOOGL"
frequency = "daily"
interval = NULL
api_key = "1455F2N7QCHHDV1W"
frequency = gsub(" ", "", toupper(frequency))
data = jsonlite::fromJSON(
paste0(
"https://www.alphavantage.co/query?function=TIME_SERIES_", frequency, "&symbol=", stock_symbol,"&interval=", interval, "&outputsize=full&apikey=", api_key
)
)
data = data[[2]]
names_vector = names(data[[1]])
data_frame_names = c("date", gsub('[0-9]. ',"", names(data[[1]])))
filler = 1:length(data)
transformed_data = data.frame(matrix(1, nrow = length(data), ncol = length(data_frame_names)),
stringsAsFactors = F)
names(transformed_data) = data_frame_names
View(transformed_data)
transformed_data$date = names(data)
for(i in 1:length(data)){
for(j in 1:length(names_vector)){
transformed_data[i, j + 1] = data[[i]][names_vector[j]]
}
}
transformed_data$date = as.Date(transformed_data$date)
mod_cols = names(transformed_data)[!(names(transformed_data) %in% c("date", "time"))]
transformed_data[,mod_cols] = sapply(transformed_data[,mod_cols], as.numeric)
transformed_data = transformed_data[order(transformed_data$date),]
rownames(transformed_data) = 1:nrow(transformed_data)
View(transformed_data)
library(AlphaVantageQuery)
alpha_vantage_auth("1455F2N7QCHHDV1W")
alpha_vant("GOOGL", frequency = "daily")
alpha_vant("GOOGL", frequency = "daily_adjusted")
View(GOOGL_DAILY_ADJUSTED)
stock_symbol = "GOOGL"
frequency = "daily_adjusted"
interval = NULL
api_key = "1455F2N7QCHHDV1W"
frequency = gsub(" ", "", toupper(frequency))
data = jsonlite::fromJSON(
paste0(
"https://www.alphavantage.co/query?function=TIME_SERIES_", frequency, "&symbol=", stock_symbol,"&interval=", interval, "&outputsize=full&apikey=", api_key
)
)
data = data[[2]]
data[[1]]
data[[2]]
data[[3]]
data[[4]]
data[[5]]
data[[20]]
data[[1]]
stock_symbol = "GOOGL"
frequency = "daily_adjusted"
interval = NULL
api_key = "1455F2N7QCHHDV1W"
frequency = gsub(" ", "", toupper(frequency))
data = jsonlite::fromJSON(
paste0(
"https://www.alphavantage.co/query?function=TIME_SERIES_", frequency, "&symbol=", stock_symbol,"&interval=", interval, "&outputsize=full&apikey=", api_key
)
)
data = data[[2]]
if("Error Message" %in% names(data)){
stop("API call unsuccessful. Ensure that you entered a valid ticker symbol, frequency or interval argument!")
} else {
names_vector = names(data[[1]])
data_frame_names = c("date", gsub('[0-9]. ',"", names(data[[1]])))
filler = 1:length(data)
transformed_data = data.frame(matrix(1, nrow = length(data), ncol = length(data_frame_names)),
stringsAsFactors = F)
names(transformed_data) = data_frame_names
transformed_data$date = names(data)
for(i in 1:length(data)){
for(j in 1:length(names_vector)){
transformed_data[i, j + 1] = data[[i]][names_vector[j]]
}
}
transformed_data$date = as.Date(transformed_data$date)
mod_cols = names(transformed_data)[!(names(transformed_data) %in% c("date", "time"))]
transformed_data[,mod_cols] = sapply(transformed_data[,mod_cols], as.numeric)
transformed_data = transformed_data[order(transformed_data$date),]
rownames(transformed_data) = 1:nrow(transformed_data)
assign(paste0(stock_symbol,"_", frequency, interval), transformed_data, envir = .GlobalEnv)
}
View(transformed_data)
table(transformed_data$close == transformed_data$`adjusted close`)
View(
transformed_data[which(transformed_data$close != transformed_data$`adjusted close`),]
)
library(AlphaVantageQuery)
alpha_vant(stock_symbol = "GOOGL",
frequency = "monthly")
alpha_vantage_auth("1455F2N7QCHHDV1W")
alpha_vant(stock_symbol = "GOOGL",
frequency = "monthly")
View(GOOGL_MONTHLY)
